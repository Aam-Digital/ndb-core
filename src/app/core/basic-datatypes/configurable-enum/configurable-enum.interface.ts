import { Ordering } from "./configurable-enum-ordering";
import HasOrdinal = Ordering.HasOrdinal;

/**
 * Interface specifying overall object representing an enum with all its options
 * as stored in the config database
 */
export type ConfigurableEnumConfig<
  T extends ConfigurableEnumValue = ConfigurableEnumValue,
> = Array<T>;

/**
 * Mandatory properties of each option of an configurable enum
 * the actual object can contain additional properties in the specific context of that enum (e.g. a `color` property)
 */
export interface ConfigurableEnumValue extends HasOrdinal {
  /**
   * identifier that is unique among all values of the same enum and does not change even when label or other things are edited
   */
  id: string;

  /**
   * human-readable name that is displayed representing the value in the UI
   */
  label: string;

  /**
   * an optional color code which should be displayed
   */
  color?: string;

  /**
   * indicates this is a fallback option generated by configurable-enum datatype for
   * a value that is not included in the selectable enum options of the config.
   */
  isInvalidOption?: boolean;

  /**
   * optional styling class that should be applied when displaying this value
   */
  style?: string;
}

export const EMPTY: ConfigurableEnumValue = {
  id: "",
  label: "",
};