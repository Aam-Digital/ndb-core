import { Injectable } from "@angular/core";
import { FileService } from "../../file/file.service";
import { SafeUrl } from "@angular/platform-browser";
import { Entity } from "app/core/entity/model/entity";
import { from, Observable } from "rxjs";
import { EntityMapperService } from "../../../core/entity/entity-mapper/entity-mapper.service";
import { EntityRegistry } from "../../../core/entity/database-entity.decorator";
import { SyncStateSubject } from "../../../core/session/session-type";
import { FileTemplate } from "../file-template.entity";
import { map, switchMap } from "rxjs/operators";

/**
 * Interact with the PDF Template Generation API that uses File Templates to generate custom pdf documents.
 */
@Injectable({
  providedIn: "root",
})
export class PdfGeneratorApiService extends FileService {
  constructor(
    entityMapper: EntityMapperService,
    entities: EntityRegistry,
    syncState: SyncStateSubject,
    private fileService: FileService,
  ) {
    super(entityMapper, entities, syncState);
  }

  /*
  --- FileService methods ---
  */

  /**
   * Upload a new template file to the API.
   * @param file to be uploaded to the API as a template
   * @param entity
   * @param property
   * @return The template ID generated by the API
   */
  uploadFile(file: File, entity: Entity, property: string): Observable<string> {
    // API returns carbone ID
    // upload as Multi-Part Form Data

    // TODO: replace with actual implementation for PDF API
    return this.fileService.uploadFile(file, entity, property);
  }

  showFile(entity: Entity, property: string): void {
    // TODO: replace with actual implementation for PDF API
    return this.fileService.showFile(entity, property);
  }
  loadFile(entity: Entity, property: string): Observable<SafeUrl> {
    // TODO: replace with actual implementation for PDF API
    return this.fileService.loadFile(entity, property);
  }
  removeFile(entity: Entity, property: string): Observable<any> {
    // TODO: replace with actual implementation for PDF API
    return this.fileService.removeFile(entity, property);
  }
  removeAllFiles(entity: Entity): Observable<any> {
    // TODO: replace with actual implementation for PDF API
    return this.fileService.removeAllFiles(entity);
  }

  /*
  --- PDF Generation API methods ---
  */

  /**
   * Generate a PDF applying actual data to an existing template.
   * @param templateEntityId The id of the FileTemplate entity (not the template ID of the PDF API)
   * @param data The data object (typically an entity) to be applied to the template
   * @return // TODO: what is the return value here exactly?
   */
  generatePdfFromTemplate(
    templateEntityId: string,
    data: Object,
  ): Observable<SafeUrl> {
    // TODO: replace with actual implementation for PDF API
    return from(this.entityMapper.loadType(FileTemplate)).pipe(
      map((templates) => templates.find((t) => t.getId() === templateEntityId)),
      switchMap((templateEntity: FileTemplate) =>
        this.fileService.loadFile(templateEntity, "templateId"),
      ),
    );
  }
}
