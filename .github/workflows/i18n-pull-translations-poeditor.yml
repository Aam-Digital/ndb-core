name: i18n - Update translations from POEditor

on: workflow_dispatch

permissions:
  contents: write
  pull-requests: write

jobs:
  pull-translations:
    runs-on: ubuntu-latest
    env:
      BASE_BRANCH: "master"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name ${{ secrets.GIT_BOT_USERNAME }}
          git config user.email ${{ secrets.GIT_BOT_EMAIL }}
          git remote set-url origin https://${{ secrets.GIT_BOT_ACCESS_TOKEN }}@github.com/Aam-Digital/ndb-core.git

      - name: Create or update branch for translations
        run: |
          branch_name="chore/update-poeditor-translations"

          # Check if branch exists on remote
          if git ls-remote --exit-code origin $branch_name; then
            echo "Branch $branch_name already exists. Fetching it..."
            git fetch origin "$branch_name:$branch_name"

            git checkout "$branch_name"
            git pull origin "$branch_name"
          else
            echo "Creating new branch $branch_name..."
            git checkout -b $branch_name
          fi

      - name: Export translations from POEditor
        # see POEditor Export API: https://poeditor.com/docs/api#projects_export
        run: |
          languages=("fr" "it" "de")
          for lang in "${languages[@]}"; do
          echo "Exporting translations for language $lang"
          response=$(curl -s -X POST https://api.poeditor.com/v2/projects/export \
          -F "api_token=${{ secrets.POEDITOR_API_TOKEN }}" \
          -F "id=${{ secrets.POEDITOR_PROJECT_ID }}" \
          -F "language=$lang" \
          -F "fallback_language=en" \
          -F "type=xlf")
          status=$(echo "$response" | jq -r '.response.status')
          if [ "$status" == "success" ]; then
          url=$(echo "$response" | jq -r '.result.url')
          if [ -n "$url" ]; then
          echo "Downloading translations for $lang from $url"
          curl -s -o "src/assets/locale/messages.$lang.xlf" "$url"
          else
          echo "No URL found for downloading translations for $lang"
          exit 1
          fi
          else
          echo "Error exporting translations for $lang: $response"
          exit 1
          fi
          done

      - name: Commit updated translations
        run: |
          git add src/assets/locale/*.xlf
          git commit -m  "fix(i18n): update latest translations from POEditor"

      - name: Push changes
        run: |
          git push origin HEAD

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const headBranch = 'chore/update-poeditor-translations';
            const baseBranch = process.env.BASE_BRANCH;

            const pulls = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              head: `${owner}:${headBranch}`,
            });

            if (pulls.data.length < 1) {
              const diff = await github.rest.repos.compareCommits({
              owner,
              repo,
              base: baseBranch,
              head: headBranch,
            });

            if (diff.data.commits.length === 0) {
              return;
            }
            const result = await github.rest.pulls.create({
              title: 'Update POEditor translations messages',
              owner,
              repo,
              head: headBranch,
              base: baseBranch,
              body: [
                'This PR updates translations from POEditor.',
                'Generated by GitHub Actions.'
              ].join('\n'),
            });
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['automated pr'],
            });
            } else {
              const existingPR = pulls.data[0];
              await github.rest.pulls.update({
                owner: owner,
                repo: repo,
                pull_number: existingPR.number,
                body: [
                  existingPR.body,
                  `Updated by Job ${context.job}`,
                ].join('\n'),
              });
            }
