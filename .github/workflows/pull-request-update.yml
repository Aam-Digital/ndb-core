name: Pull Request - Update

on: pull_request

env:
  REGISTRY_IMAGE: aamdigital/ndb-server

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        os:
          - ubuntu-latest
          - [ self-hosted, Linux, ARM64 ]
        exclude:
          - platform: linux/arm64
            os: ubuntu-latest
          - platform: linux/amd64
            os: [ self-hosted, Linux, ARM64 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository files
        uses: actions/checkout@v4

      - name: Prepare Platform
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get time of commit
        run: echo "TIME=$(git log -1 --pretty=format:%ct)" >> $GITHUB_ENV

      - name: Run tests in Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          context: ./
          file: ./build/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          target: test
          cache-from: type=gha
          # todo upload coverage
          build-args: |
            UPLOAD_COVERAGE=${{ false }}
            GIT_COMMIT_SHA=${{ github.event.pull_request.head.sha }}
            GIT_BRANCH=${{ github.head_ref }}
            GIT_COMMITTED_AT=${{ env.TIME }}
            CC_TEST_REPORTER_ID=${{ secrets.CODE_CLIMATE_ID }}

      - name: Run tests with timezone
        if: ${{ matrix.platform == 'linux/amd64' }}
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          context: ./
          file: ./build/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          target: test
          cache-from: type=gha
          build-args: |
            UPLOAD_COVERAGE=${{ false }}
            TZ=America/Detroit

  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        os:
          - ubuntu-latest
          - [self-hosted, Linux, ARM64]
        exclude:
          - platform: linux/arm64
            os: ubuntu-latest
          - platform: linux/amd64
            os: [self-hosted, Linux, ARM64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository files
        uses: actions/checkout@v4

      - name: Extract tag
        run: echo "TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Prepare Platform
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create export directories
        run: |
          mkdir -p ./tmp/build
          mkdir -p ./tmp/digests

      - name: Build
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          context: ./
          file: ./build/Dockerfile
          target: build-export
          outputs: type=tar,dest=build.tar ./tmp/build/
          cache-from: type=gha
          cache-to: type=gha,mode=min
        env:
          SOURCE_DATE_EPOCH: 0

      - name: Build Image and push by digest
        id: build-image
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          context: ./
          file: ./build/Dockerfile
          target: app
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true,unpack=true,store=true
          cache-from: type=gha
          cache-to: type=gha,mode=min
        env:
          SOURCE_DATE_EPOCH: 0

      - name: Export digest
        run: |
          ls -lsa
          ls -lsa ./tmp/build
          ls -lsa ./tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "./tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ./tmp/digests/*
          if-no-files-found: error
          retention-days: 1

      - name: Upload build archive
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ./temp/build/*
          if-no-files-found: error
          retention-days: 1

  upload-coverage:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          path: ./temp/build
      - name: List
        run: |
          ls -lsa ./tmp/build

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ./tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create manifest list and push
        working-directory: ./tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - merge
    steps:
      - name: Deploy updated image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /var/docker/pr-${{ github.event.number }}
            docker compose pull
            docker compose up -d
